// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Sets up the spreadsheet for assertions
        /// </summary>
        public void SetupSpreadsheet()
        {
            #region Variable Declarations
            WinEdit uIFormulaTextboxEdit = this.UIBestSpreadsheetEverWindow.UIFormulaTextboxWindow.UIFormulaTextboxEdit;
            WinClient uISpreadsheetPanel1Client = this.UIBestSpreadsheetEverWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%USERPROFILE%\Documents\CS3500Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIBestSpreadsheetEverWindow = ApplicationUnderTest.Launch(@"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe");

            // Type '=B2 + C2 * 5' in 'formulaTextbox' text box
            uIFormulaTextboxEdit.Text = this.SetupSpreadsheetParams.UIFormulaTextboxEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(166, 58));

            // Type '4' in 'formulaTextbox' text box
            uIFormulaTextboxEdit.Text = this.SetupSpreadsheetParams.UIFormulaTextboxEditText1;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(205, 63));

            // Type '5' in 'formulaTextbox' text box
            uIFormulaTextboxEdit.Text = this.SetupSpreadsheetParams.UIFormulaTextboxEditText2;

            // Type '{Enter}' in 'formulaTextbox' text box
            Keyboard.SendKeys(uIFormulaTextboxEdit, this.SetupSpreadsheetParams.UIFormulaTextboxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(143, 52));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(77, 30));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(70, 36));
        }
        
        /// <summary>
        /// Assert that formulas can be inserted
        /// </summary>
        public void AssertFormulaInsertion()
        {
            #region Variable Declarations
            WinEdit uIFormulaTextboxEdit = this.UIBestSpreadsheetEverWindow.UIFormulaTextboxWindow.UIFormulaTextboxEdit;
            #endregion

            // Verify that the 'Text' property of 'formulaTextbox' text box equals '=B2+C2*5'
            Assert.AreEqual(this.AssertFormulaInsertionExpectedValues.UIFormulaTextboxEditText, uIFormulaTextboxEdit.Text, "Cell does not contain formula");
        }
        
        /// <summary>
        /// sets up a graph for assertions
        /// </summary>
        public void SetupGraph()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIBestSpreadsheetEverWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIFormulaTextboxEdit = this.UIBestSpreadsheetEverWindow.UIFormulaTextboxWindow.UIFormulaTextboxEdit;
            WinMenuItem uIBarGraphMenuItem = this.UIBestSpreadsheetEverWindow.UIMenuStrip1MenuBar.UIGraphMenuItem.UIBarGraphMenuItem;
            WinEdit uICellNameTextboxEdit = this.UIBarGraphWindow.UICellNameTextboxWindow.UICellNameTextboxEdit;
            WinEdit uIBarNameTextboxEdit = this.UIBarGraphWindow.UIBarNameTextboxWindow.UIBarNameTextboxEdit;
            WinGroup uIControlGroupGroup = this.UIBarGraphWindow.UIControlGroupWindow.UIControlGroupGroup;
            WinEdit uIChartNameTextboxEdit = this.UIBarGraphWindow.UIChartNameTextboxWindow.UIChartNameTextboxEdit;
            WinButton uILoadGraphButton = this.UIBarGraphWindow.UILoadGraphWindow.UILoadGraphButton;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(56, 63));

            // Type 'Label1' in 'formulaTextbox' text box
            uIFormulaTextboxEdit.Text = this.SetupGraphParams.UIFormulaTextboxEditText;

            // Type '{Enter}' in 'formulaTextbox' text box
            Keyboard.SendKeys(uIFormulaTextboxEdit, this.SetupGraphParams.UIFormulaTextboxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(159, 53));

            // Type 'Label2' in 'formulaTextbox' text box
            uIFormulaTextboxEdit.Text = this.SetupGraphParams.UIFormulaTextboxEditText1;

            // Type '{Enter}' in 'formulaTextbox' text box
            Keyboard.SendKeys(uIFormulaTextboxEdit, this.SetupGraphParams.UIFormulaTextboxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(146, 38));

            // Type '' in 'formulaTextbox' text box
            uIFormulaTextboxEdit.Text = this.SetupGraphParams.UIFormulaTextboxEditText2;

            // Type '{Back}' in 'formulaTextbox' text box
            Keyboard.SendKeys(uIFormulaTextboxEdit, this.SetupGraphParams.UIFormulaTextboxEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(61, 35));

            // Type '=B1+C2*5' in 'formulaTextbox' text box
            uIFormulaTextboxEdit.Text = this.SetupGraphParams.UIFormulaTextboxEditText3;

            // Type '{Enter}' in 'formulaTextbox' text box
            Keyboard.SendKeys(uIFormulaTextboxEdit, this.SetupGraphParams.UIFormulaTextboxEditSendKeys3, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(157, 37));

            // Type '5' in 'formulaTextbox' text box
            uIFormulaTextboxEdit.Text = this.SetupGraphParams.UIFormulaTextboxEditText4;

            // Type '{Enter}' in 'formulaTextbox' text box
            Keyboard.SendKeys(uIFormulaTextboxEdit, this.SetupGraphParams.UIFormulaTextboxEditSendKeys4, ModifierKeys.None);

            // Click 'Graph' -> 'Bar Graph' menu item
            Mouse.Click(uIBarGraphMenuItem, new Point(24, 9));

            // Type 'a1, b1' in 'cellNameTextbox' text box
            uICellNameTextboxEdit.Text = this.SetupGraphParams.UICellNameTextboxEditText;

            // Type 'a2, b2' in 'barNameTextbox' text box
            uIBarNameTextboxEdit.Text = this.SetupGraphParams.UIBarNameTextboxEditText;

            // Click 'controlGroup' group
            Mouse.Click(uIControlGroupGroup, new Point(236, 41));

            // Type 'testing' in 'chartNameTextbox' text box
            uIChartNameTextboxEdit.Text = this.SetupGraphParams.UIChartNameTextboxEditText;

            // Click 'Load Graph' button
            Mouse.Click(uILoadGraphButton, new Point(20, 9));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinControl uIXaxisMajorGridlinesImage = this.UIBarGraphWindow.UIChartAreaChartArea1Image.UIXaxisMajorGridlinesImage;
            #endregion

            // Verify that the 'ControlType' property of 'X axis Major Gridlines' image equals 'Image'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIXaxisMajorGridlinesImageControlType, uIXaxisMajorGridlinesImage.ControlType.ToString(), "Graph did not show");
        }
        
        /// <summary>
        /// save and open file for assertions
        /// </summary>
        public void SaveAndOpenFile()
        {
            #region Variable Declarations
            WinMenuItem uISaveMenuItem = this.UIBestSpreadsheetEverWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinMenuItem uIOpenMenuItem = this.UIBestSpreadsheetEverWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UITestingsprdListItem.UINameEdit;
            WinClient uISpreadsheetPanel1Client = this.UIBestSpreadsheetEverWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(23, 12));

            // Select 'testing' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveAndOpenFileParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(11, 13));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(27, 14));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(28, 13));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(20, 8));

            // Move 'spreadsheetPanel1' client
            Mouse.StartDragging(uISpreadsheetPanel1Client, new Point(221, 100));
            Mouse.StopDragging(uISpreadsheetPanel1Client, -105, -45);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(90, 39));
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uIFormulaTextboxEdit = this.UIBestSpreadsheetEverWindow.UIFormulaTextboxWindow.UIFormulaTextboxEdit;
            #endregion

            // Verify that the 'Text' property of 'formulaTextbox' text box equals '=B1+C2*5'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIFormulaTextboxEditText, uIFormulaTextboxEdit.Text, "Incorrect formula in cell");
        }
        
        /// <summary>
        /// opens how to use window to ensure that it opened
        /// </summary>
        public void OpenHowToUse()
        {
            #region Variable Declarations
            WinMenuItem uIHowToUseMenuItem = this.UIBestSpreadsheetEverWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIHowToUseMenuItem;
            #endregion

            // Click 'Help' -> 'How To Use' menu item
            Mouse.Click(uIHowToUseMenuItem, new Point(34, 10));
        }
        
        /// <summary>
        /// Inserts an invalid formula into the cell
        /// </summary>
        public void InsertInvalidFormula()
        {
            #region Variable Declarations
            WinEdit uIFormulaTextboxEdit = this.UIBestSpreadsheetEverWindow.UIFormulaTextboxWindow.UIFormulaTextboxEdit;
            #endregion

            // Launch '%USERPROFILE%\Documents\CS3500Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIBestSpreadsheetEverWindow = ApplicationUnderTest.Launch(@"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe");

            // Type '=A0 + 3' in 'formulaTextbox' text box
            uIFormulaTextboxEdit.Text = this.InsertInvalidFormulaParams.UIFormulaTextboxEditText;

            // Type '{Enter}' in 'formulaTextbox' text box
            Keyboard.SendKeys(uIFormulaTextboxEdit, this.InsertInvalidFormulaParams.UIFormulaTextboxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WinText uIInvalidformulaText = this.UIErrorWindow.UIInvalidformulaWindow.UIInvalidformulaText;
            #endregion

            // Verify that the 'DisplayText' property of 'Invalid formula.' label equals 'Invalid formula.'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UIInvalidformulaTextDisplayText, uIInvalidformulaText.DisplayText, "Formula was supposed to be invalid");
        }
        
        /// <summary>
        /// Created new window
        /// </summary>
        public void NewWindow()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UIBestSpreadsheetEverWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            #endregion

            // Launch '%USERPROFILE%\Documents\CS3500Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIBestSpreadsheetEverWindow = ApplicationUnderTest.Launch(@"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe");

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(24, 15));
        }
        
        /// <summary>
        /// Assert that a new window opens when clicking new
        /// </summary>
        public void AssertWindowOpened()
        {
            #region Variable Declarations
            WinWindow uIBestSpreadsheetEverWindow1 = this.UIBestSpreadsheetEverWindow1;
            #endregion

            // Verify that the 'ClassName' property of 'Best Spreadsheet Ever' window equals 'WindowsForms10.Window.8.app.0.2bf8098_r11_ad1'
            Assert.AreEqual(this.AssertWindowOpenedExpectedValues.UIBestSpreadsheetEverWindow1ClassName, uIBestSpreadsheetEverWindow1.ClassName, "Window did not open");
        }
        
        #region Properties
        public virtual SetupSpreadsheetParams SetupSpreadsheetParams
        {
            get
            {
                if ((this.mSetupSpreadsheetParams == null))
                {
                    this.mSetupSpreadsheetParams = new SetupSpreadsheetParams();
                }
                return this.mSetupSpreadsheetParams;
            }
        }
        
        public virtual AssertFormulaInsertionExpectedValues AssertFormulaInsertionExpectedValues
        {
            get
            {
                if ((this.mAssertFormulaInsertionExpectedValues == null))
                {
                    this.mAssertFormulaInsertionExpectedValues = new AssertFormulaInsertionExpectedValues();
                }
                return this.mAssertFormulaInsertionExpectedValues;
            }
        }
        
        public virtual SetupGraphParams SetupGraphParams
        {
            get
            {
                if ((this.mSetupGraphParams == null))
                {
                    this.mSetupGraphParams = new SetupGraphParams();
                }
                return this.mSetupGraphParams;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual SaveAndOpenFileParams SaveAndOpenFileParams
        {
            get
            {
                if ((this.mSaveAndOpenFileParams == null))
                {
                    this.mSaveAndOpenFileParams = new SaveAndOpenFileParams();
                }
                return this.mSaveAndOpenFileParams;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual InsertInvalidFormulaParams InsertInvalidFormulaParams
        {
            get
            {
                if ((this.mInsertInvalidFormulaParams == null))
                {
                    this.mInsertInvalidFormulaParams = new InsertInvalidFormulaParams();
                }
                return this.mInsertInvalidFormulaParams;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual NewWindowParams NewWindowParams
        {
            get
            {
                if ((this.mNewWindowParams == null))
                {
                    this.mNewWindowParams = new NewWindowParams();
                }
                return this.mNewWindowParams;
            }
        }
        
        public virtual AssertWindowOpenedExpectedValues AssertWindowOpenedExpectedValues
        {
            get
            {
                if ((this.mAssertWindowOpenedExpectedValues == null))
                {
                    this.mAssertWindowOpenedExpectedValues = new AssertWindowOpenedExpectedValues();
                }
                return this.mAssertWindowOpenedExpectedValues;
            }
        }
        
        public UIBestSpreadsheetEverWindow UIBestSpreadsheetEverWindow
        {
            get
            {
                if ((this.mUIBestSpreadsheetEverWindow == null))
                {
                    this.mUIBestSpreadsheetEverWindow = new UIBestSpreadsheetEverWindow();
                }
                return this.mUIBestSpreadsheetEverWindow;
            }
        }
        
        public UIBarGraphWindow UIBarGraphWindow
        {
            get
            {
                if ((this.mUIBarGraphWindow == null))
                {
                    this.mUIBarGraphWindow = new UIBarGraphWindow();
                }
                return this.mUIBarGraphWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIErrorWindow UIErrorWindow
        {
            get
            {
                if ((this.mUIErrorWindow == null))
                {
                    this.mUIErrorWindow = new UIErrorWindow();
                }
                return this.mUIErrorWindow;
            }
        }
        
        public UIBestSpreadsheetEverWindow1 UIBestSpreadsheetEverWindow1
        {
            get
            {
                if ((this.mUIBestSpreadsheetEverWindow1 == null))
                {
                    this.mUIBestSpreadsheetEverWindow1 = new UIBestSpreadsheetEverWindow1();
                }
                return this.mUIBestSpreadsheetEverWindow1;
            }
        }
        #endregion
        
        #region Fields
        private SetupSpreadsheetParams mSetupSpreadsheetParams;
        
        private AssertFormulaInsertionExpectedValues mAssertFormulaInsertionExpectedValues;
        
        private SetupGraphParams mSetupGraphParams;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private SaveAndOpenFileParams mSaveAndOpenFileParams;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private InsertInvalidFormulaParams mInsertInvalidFormulaParams;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private NewWindowParams mNewWindowParams;
        
        private AssertWindowOpenedExpectedValues mAssertWindowOpenedExpectedValues;
        
        private UIBestSpreadsheetEverWindow mUIBestSpreadsheetEverWindow;
        
        private UIBarGraphWindow mUIBarGraphWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UIErrorWindow mUIErrorWindow;
        
        private UIBestSpreadsheetEverWindow1 mUIBestSpreadsheetEverWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetupSpreadsheet'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SetupSpreadsheetParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\CS3500Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIBestSpreadsheetEverWindowExePath = "C:\\Users\\Logan\\Documents\\CS3500Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetG" +
            "UI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\CS3500Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIBestSpreadsheetEverWindowAlternateExePath = "%USERPROFILE%\\Documents\\CS3500Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGU" +
            "I.exe";
        
        /// <summary>
        /// Type '=B2 + C2 * 5' in 'formulaTextbox' text box
        /// </summary>
        public string UIFormulaTextboxEditText = "=B2 + C2 * 5";
        
        /// <summary>
        /// Type '4' in 'formulaTextbox' text box
        /// </summary>
        public string UIFormulaTextboxEditText1 = "4";
        
        /// <summary>
        /// Type '5' in 'formulaTextbox' text box
        /// </summary>
        public string UIFormulaTextboxEditText2 = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaTextbox' text box
        /// </summary>
        public string UIFormulaTextboxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFormulaInsertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertFormulaInsertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'formulaTextbox' text box equals '=B2+C2*5'
        /// </summary>
        public string UIFormulaTextboxEditText = "=B2+C2*5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetupGraph'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SetupGraphParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Label1' in 'formulaTextbox' text box
        /// </summary>
        public string UIFormulaTextboxEditText = "Label1";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaTextbox' text box
        /// </summary>
        public string UIFormulaTextboxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Label2' in 'formulaTextbox' text box
        /// </summary>
        public string UIFormulaTextboxEditText1 = "Label2";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaTextbox' text box
        /// </summary>
        public string UIFormulaTextboxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '' in 'formulaTextbox' text box
        /// </summary>
        public string UIFormulaTextboxEditText2 = "";
        
        /// <summary>
        /// Type '{Back}' in 'formulaTextbox' text box
        /// </summary>
        public string UIFormulaTextboxEditSendKeys2 = "{Back}";
        
        /// <summary>
        /// Type '=B1+C2*5' in 'formulaTextbox' text box
        /// </summary>
        public string UIFormulaTextboxEditText3 = "=B1+C2*5";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaTextbox' text box
        /// </summary>
        public string UIFormulaTextboxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '5' in 'formulaTextbox' text box
        /// </summary>
        public string UIFormulaTextboxEditText4 = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaTextbox' text box
        /// </summary>
        public string UIFormulaTextboxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type 'a1, b1' in 'cellNameTextbox' text box
        /// </summary>
        public string UICellNameTextboxEditText = "a1, b1";
        
        /// <summary>
        /// Type 'a2, b2' in 'barNameTextbox' text box
        /// </summary>
        public string UIBarNameTextboxEditText = "a2, b2";
        
        /// <summary>
        /// Type 'testing' in 'chartNameTextbox' text box
        /// </summary>
        public string UIChartNameTextboxEditText = "testing";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'X axis Major Gridlines' image equals 'Image'
        /// </summary>
        public string UIXaxisMajorGridlinesImageControlType = "Image";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveAndOpenFile'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SaveAndOpenFileParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'testing' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testing";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'formulaTextbox' text box equals '=B1+C2*5'
        /// </summary>
        public string UIFormulaTextboxEditText = "=B1+C2*5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertInvalidFormula'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class InsertInvalidFormulaParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\CS3500Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIBestSpreadsheetEverWindowExePath = "C:\\Users\\Logan\\Documents\\CS3500Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetG" +
            "UI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\CS3500Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIBestSpreadsheetEverWindowAlternateExePath = "%USERPROFILE%\\Documents\\CS3500Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGU" +
            "I.exe";
        
        /// <summary>
        /// Type '=A0 + 3' in 'formulaTextbox' text box
        /// </summary>
        public string UIFormulaTextboxEditText = "=A0 + 3";
        
        /// <summary>
        /// Type '{Enter}' in 'formulaTextbox' text box
        /// </summary>
        public string UIFormulaTextboxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Invalid formula.' label equals 'Invalid formula.'
        /// </summary>
        public string UIInvalidformulaTextDisplayText = "Invalid formula.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NewWindow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class NewWindowParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\CS3500Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIBestSpreadsheetEverWindowExePath = "C:\\Users\\Logan\\Documents\\CS3500Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetG" +
            "UI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\CS3500Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIBestSpreadsheetEverWindowAlternateExePath = "%USERPROFILE%\\Documents\\CS3500Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGU" +
            "I.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertWindowOpened'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertWindowOpenedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ClassName' property of 'Best Spreadsheet Ever' window equals 'WindowsForms10.Window.8.app.0.2bf8098_r11_ad1'
        /// </summary>
        public string UIBestSpreadsheetEverWindow1ClassName = "WindowsForms10.Window.8.app.0.2bf8098_r11_ad1";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIBestSpreadsheetEverWindow : WinWindow
    {
        
        public UIBestSpreadsheetEverWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Best Spreadsheet Ever";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Best Spreadsheet Ever");
            #endregion
        }
        
        #region Properties
        public UIFormulaTextboxWindow UIFormulaTextboxWindow
        {
            get
            {
                if ((this.mUIFormulaTextboxWindow == null))
                {
                    this.mUIFormulaTextboxWindow = new UIFormulaTextboxWindow(this);
                }
                return this.mUIFormulaTextboxWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIFormulaTextboxWindow mUIFormulaTextboxWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFormulaTextboxWindow : WinWindow
    {
        
        public UIFormulaTextboxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "formulaTextbox";
            this.WindowTitles.Add("Best Spreadsheet Ever");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFormulaTextboxEdit
        {
            get
            {
                if ((this.mUIFormulaTextboxEdit == null))
                {
                    this.mUIFormulaTextboxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFormulaTextboxEdit.WindowTitles.Add("Best Spreadsheet Ever");
                    #endregion
                }
                return this.mUIFormulaTextboxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFormulaTextboxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Best Spreadsheet Ever");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Best Spreadsheet Ever");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Best Spreadsheet Ever");
            #endregion
        }
        
        #region Properties
        public UIGraphMenuItem UIGraphMenuItem
        {
            get
            {
                if ((this.mUIGraphMenuItem == null))
                {
                    this.mUIGraphMenuItem = new UIGraphMenuItem(this);
                }
                return this.mUIGraphMenuItem;
            }
        }
        
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIGraphMenuItem mUIGraphMenuItem;
        
        private UIFileMenuItem mUIFileMenuItem;
        
        private UIHelpMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIGraphMenuItem : WinMenuItem
    {
        
        public UIGraphMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Graph";
            this.WindowTitles.Add("Best Spreadsheet Ever");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIBarGraphMenuItem
        {
            get
            {
                if ((this.mUIBarGraphMenuItem == null))
                {
                    this.mUIBarGraphMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIBarGraphMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Bar Graph";
                    this.mUIBarGraphMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIBarGraphMenuItem.WindowTitles.Add("Best Spreadsheet Ever");
                    #endregion
                }
                return this.mUIBarGraphMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIBarGraphMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Best Spreadsheet Ever");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Best Spreadsheet Ever");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Best Spreadsheet Ever");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Best Spreadsheet Ever");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("Best Spreadsheet Ever");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIHowToUseMenuItem
        {
            get
            {
                if ((this.mUIHowToUseMenuItem == null))
                {
                    this.mUIHowToUseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHowToUseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "How To Use";
                    this.mUIHowToUseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIHowToUseMenuItem.WindowTitles.Add("Best Spreadsheet Ever");
                    #endregion
                }
                return this.mUIHowToUseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIHowToUseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIBarGraphWindow : WinWindow
    {
        
        public UIBarGraphWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Bar Graph";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Bar Graph");
            #endregion
        }
        
        #region Properties
        public UICellNameTextboxWindow UICellNameTextboxWindow
        {
            get
            {
                if ((this.mUICellNameTextboxWindow == null))
                {
                    this.mUICellNameTextboxWindow = new UICellNameTextboxWindow(this);
                }
                return this.mUICellNameTextboxWindow;
            }
        }
        
        public UIBarNameTextboxWindow UIBarNameTextboxWindow
        {
            get
            {
                if ((this.mUIBarNameTextboxWindow == null))
                {
                    this.mUIBarNameTextboxWindow = new UIBarNameTextboxWindow(this);
                }
                return this.mUIBarNameTextboxWindow;
            }
        }
        
        public UIControlGroupWindow UIControlGroupWindow
        {
            get
            {
                if ((this.mUIControlGroupWindow == null))
                {
                    this.mUIControlGroupWindow = new UIControlGroupWindow(this);
                }
                return this.mUIControlGroupWindow;
            }
        }
        
        public UIChartNameTextboxWindow UIChartNameTextboxWindow
        {
            get
            {
                if ((this.mUIChartNameTextboxWindow == null))
                {
                    this.mUIChartNameTextboxWindow = new UIChartNameTextboxWindow(this);
                }
                return this.mUIChartNameTextboxWindow;
            }
        }
        
        public UILoadGraphWindow UILoadGraphWindow
        {
            get
            {
                if ((this.mUILoadGraphWindow == null))
                {
                    this.mUILoadGraphWindow = new UILoadGraphWindow(this);
                }
                return this.mUILoadGraphWindow;
            }
        }
        
        public UIChartAreaChartArea1Image UIChartAreaChartArea1Image
        {
            get
            {
                if ((this.mUIChartAreaChartArea1Image == null))
                {
                    this.mUIChartAreaChartArea1Image = new UIChartAreaChartArea1Image(this);
                }
                return this.mUIChartAreaChartArea1Image;
            }
        }
        #endregion
        
        #region Fields
        private UICellNameTextboxWindow mUICellNameTextboxWindow;
        
        private UIBarNameTextboxWindow mUIBarNameTextboxWindow;
        
        private UIControlGroupWindow mUIControlGroupWindow;
        
        private UIChartNameTextboxWindow mUIChartNameTextboxWindow;
        
        private UILoadGraphWindow mUILoadGraphWindow;
        
        private UIChartAreaChartArea1Image mUIChartAreaChartArea1Image;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICellNameTextboxWindow : WinWindow
    {
        
        public UICellNameTextboxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellNameTextbox";
            this.WindowTitles.Add("Bar Graph");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameTextboxEdit
        {
            get
            {
                if ((this.mUICellNameTextboxEdit == null))
                {
                    this.mUICellNameTextboxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameTextboxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name for graph:";
                    this.mUICellNameTextboxEdit.WindowTitles.Add("Bar Graph");
                    #endregion
                }
                return this.mUICellNameTextboxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameTextboxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIBarNameTextboxWindow : WinWindow
    {
        
        public UIBarNameTextboxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "barNameTextbox";
            this.WindowTitles.Add("Bar Graph");
            #endregion
        }
        
        #region Properties
        public WinEdit UIBarNameTextboxEdit
        {
            get
            {
                if ((this.mUIBarNameTextboxEdit == null))
                {
                    this.mUIBarNameTextboxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIBarNameTextboxEdit.WindowTitles.Add("Bar Graph");
                    #endregion
                }
                return this.mUIBarNameTextboxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIBarNameTextboxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIControlGroupWindow : WinWindow
    {
        
        public UIControlGroupWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "controlGroup";
            this.WindowTitles.Add("Bar Graph");
            #endregion
        }
        
        #region Properties
        public WinGroup UIControlGroupGroup
        {
            get
            {
                if ((this.mUIControlGroupGroup == null))
                {
                    this.mUIControlGroupGroup = new WinGroup(this);
                    #region Search Criteria
                    this.mUIControlGroupGroup.WindowTitles.Add("Bar Graph");
                    #endregion
                }
                return this.mUIControlGroupGroup;
            }
        }
        #endregion
        
        #region Fields
        private WinGroup mUIControlGroupGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIChartNameTextboxWindow : WinWindow
    {
        
        public UIChartNameTextboxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chartNameTextbox";
            this.WindowTitles.Add("Bar Graph");
            #endregion
        }
        
        #region Properties
        public WinEdit UIChartNameTextboxEdit
        {
            get
            {
                if ((this.mUIChartNameTextboxEdit == null))
                {
                    this.mUIChartNameTextboxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIChartNameTextboxEdit.WindowTitles.Add("Bar Graph");
                    #endregion
                }
                return this.mUIChartNameTextboxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIChartNameTextboxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UILoadGraphWindow : WinWindow
    {
        
        public UILoadGraphWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button1";
            this.WindowTitles.Add("Bar Graph");
            #endregion
        }
        
        #region Properties
        public WinButton UILoadGraphButton
        {
            get
            {
                if ((this.mUILoadGraphButton == null))
                {
                    this.mUILoadGraphButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILoadGraphButton.SearchProperties[WinButton.PropertyNames.Name] = "Load Graph";
                    this.mUILoadGraphButton.WindowTitles.Add("Bar Graph");
                    #endregion
                }
                return this.mUILoadGraphButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILoadGraphButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIChartAreaChartArea1Image : WinControl
    {
        
        public UIChartAreaChartArea1Image(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Chart Area ChartArea1";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Image";
            this.WindowTitles.Add("Bar Graph");
            #endregion
        }
        
        #region Properties
        public WinControl UIXaxisMajorGridlinesImage
        {
            get
            {
                if ((this.mUIXaxisMajorGridlinesImage == null))
                {
                    this.mUIXaxisMajorGridlinesImage = new WinControl(this);
                    #region Search Criteria
                    this.mUIXaxisMajorGridlinesImage.SearchProperties[UITestControl.PropertyNames.Name] = "X axis Major Gridlines";
                    this.mUIXaxisMajorGridlinesImage.SearchProperties[UITestControl.PropertyNames.ControlType] = "Image";
                    this.mUIXaxisMajorGridlinesImage.WindowTitles.Add("Bar Graph");
                    #endregion
                }
                return this.mUIXaxisMajorGridlinesImage;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIXaxisMajorGridlinesImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITestingsprdListItem UITestingsprdListItem
        {
            get
            {
                if ((this.mUITestingsprdListItem == null))
                {
                    this.mUITestingsprdListItem = new UITestingsprdListItem(this);
                }
                return this.mUITestingsprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestingsprdListItem mUITestingsprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestingsprdListItem : WinListItem
    {
        
        public UITestingsprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "testing.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIErrorWindow : WinWindow
    {
        
        public UIErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public UIInvalidformulaWindow UIInvalidformulaWindow
        {
            get
            {
                if ((this.mUIInvalidformulaWindow == null))
                {
                    this.mUIInvalidformulaWindow = new UIInvalidformulaWindow(this);
                }
                return this.mUIInvalidformulaWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIInvalidformulaWindow mUIInvalidformulaWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIInvalidformulaWindow : WinWindow
    {
        
        public UIInvalidformulaWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public WinText UIInvalidformulaText
        {
            get
            {
                if ((this.mUIInvalidformulaText == null))
                {
                    this.mUIInvalidformulaText = new WinText(this);
                    #region Search Criteria
                    this.mUIInvalidformulaText.SearchProperties[WinText.PropertyNames.Name] = "Invalid formula.";
                    this.mUIInvalidformulaText.WindowTitles.Add("Error");
                    #endregion
                }
                return this.mUIInvalidformulaText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIInvalidformulaText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIBestSpreadsheetEverWindow1 : WinWindow
    {
        
        public UIBestSpreadsheetEverWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Best Spreadsheet Ever";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Best Spreadsheet Ever");
            #endregion
        }
    }
}
